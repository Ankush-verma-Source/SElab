<% layout('layouts/boilerplate') %>

<style>
  body {
    font-family: 'Segoe UI', sans-serif;
    background-color: #f9f9fc;
  }

  .flashcard-container {
    max-width: 1100px;
    margin: 40px auto;
    padding: 20px;
  }

  .flashcard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    flex-wrap: wrap;
  }

  .flashcard-header h2 {
    font-size: 1.8rem;
    color: #333;
  }

  .flashcard-actions {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
  }

  .action-btn {
    padding: 10px 16px;
    background-color: #2b6cb0;
    color: white;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-weight: bold;
    transition: background 0.3s;
  }

  .action-btn:hover {
    background-color: #1a4c80;
  }
  
  .action-btn:disabled {
    background-color: #a0aec0;
    cursor: not-allowed;
  }

  .flashcard-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 20px;
  }

  .flashcard {
    background: transparent;
    width: 100%;
    height: 220px;
    perspective: 1000px;
  }

  .flashcard-inner {
    position: relative;
    width: 100%;
    height: 100%;
    text-align: left;
    transition: transform 0.6s;
    transform-style: preserve-3d;
    cursor: pointer;
  }

  .flashcard:hover .flashcard-inner {
    transform: rotateY(180deg);
  }

  .flashcard-front,
  .flashcard-back {
    position: absolute;
    width: 100%;
    height: 100%;
    border-radius: 12px;
    backface-visibility: hidden;
    background-color: #fff;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    overflow-y: auto;
    padding: 18px;
    font-size: 0.95rem;
    color: #444;
    white-space: pre-wrap;
    line-height: 1.6;
    word-break: break-word;
  }

  .flashcard-back {
    background-color: #2b6cb0;
    color: #fff;
    transform: rotateY(180deg);
  }

  .flashcard-front::-webkit-scrollbar,
  .flashcard-back::-webkit-scrollbar {
    width: 5px;
  }

  .flashcard-front::-webkit-scrollbar-thumb,
  .flashcard-back::-webkit-scrollbar-thumb {
    background-color: rgba(0, 0, 0, 0.2);
    border-radius: 4px;
  }

  .empty-msg {
    font-size: 1.1rem;
    color: #888;
    text-align: center;
    margin-top: 60px;
  }

  code {
    background: rgba(27,31,35,.05);
    padding: 2px 4px;
    border-radius: 6px;
    font-family: monospace;
  }

  @media (max-width: 600px) {
    .flashcard {
      height: 260px;
    }
  }
</style>

<div class="flashcard-container">
  <div class="flashcard-header">
    <h2>Generated Flashcards</h2>
    <div class="flashcard-actions">
      <button class="action-btn" id="copy-btn">Copy</button>
      <button class="action-btn" id="export-pdf-btn">Export as PDF</button>
    </div>
  </div>

  <% if (typeof flashcards !== "undefined" && flashcards.length > 0) { %>
    <div class="flashcard-grid" id="flashcard-grid">
      <% flashcards.forEach((card, index) => { %>
        <div class="flashcard">
          <div class="flashcard-inner">
            <div class="flashcard-front">
              <strong>Q<%= index + 1 %>:</strong> <%= card.question %>
            </div>
            <div class="flashcard-back">
              <strong>Answer:</strong> <%= card.answer %>
            </div>
          </div>
        </div>
      <% }) %>
    </div>
  <% } else { %>
    <div class="empty-msg">
      No flashcards available to display.
    </div>
  <% } %>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

<script>
  const flashcardsData = <%- JSON.stringify(flashcards || []) %>;

  document.addEventListener('DOMContentLoaded', () => {
    const exportButton = document.getElementById('export-pdf-btn');
    const copyButton = document.getElementById('copy-btn');

    if (exportButton) {
      exportButton.addEventListener('click', exportFlashcardsPDF);
    }
    if (copyButton) {
      copyButton.addEventListener('click', copyFlashcards);
    }
  });

  function copyFlashcards() {
    if (flashcardsData.length === 0) {
      alert("There are no flashcards to copy.");
      return;
    }
    let textToCopy = flashcardsData.map((card, index) => {
      return `Q${index + 1}: ${card.question}\nAnswer: ${card.answer}`;
    }).join('\n\n');

    navigator.clipboard.writeText(textToCopy).then(() => {
      alert("Flashcards copied to clipboard!");
    }).catch(err => {
      console.error('Failed to copy text: ', err);
      alert("Failed to copy flashcards.");
    });
  }

  async function exportFlashcardsPDF() {
    if (flashcardsData.length === 0) {
      alert("There are no flashcards to export.");
      return;
    }
    
    const exportButton = document.getElementById('export-pdf-btn');
    const originalButtonText = exportButton.innerText;
    exportButton.innerText = 'Generating...';
    exportButton.disabled = true;

    // 1. Create a temporary, hidden container for clean PDF content.
    const printContainer = document.createElement('div');
    printContainer.style.position = 'absolute';
    printContainer.style.left = '-9999px';
    printContainer.style.width = '800px'; 
    printContainer.style.fontFamily = 'sans-serif';
    printContainer.style.color = '#333';
    printContainer.innerHTML = '<h2 style="text-align: center; margin-bottom: 20px;">Generated Flashcards</h2>';

    flashcardsData.forEach((card, index) => {
      const cardElement = document.createElement('div');
      cardElement.style.padding = '15px';
      cardElement.style.marginBottom = '15px';
      cardElement.style.border = '1px solid #ddd';
      cardElement.style.borderRadius = '8px';
      cardElement.style.backgroundColor = '#fff';
      cardElement.style.pageBreakInside = 'avoid';

      cardElement.innerHTML = `
        <p style="margin: 0 0 10px 0; font-weight: bold;">Q${index + 1}: ${card.question}</p>
        <hr style="border: none; border-top: 1px solid #eee;">
        <p style="margin: 10px 0 0 0;"><strong>Answer:</strong> ${card.answer}</p>
      `;
      printContainer.appendChild(cardElement);
    });
    
    document.body.appendChild(printContainer);

    try {
      // 2. Render the entire container into one tall canvas.
      const canvas = await html2canvas(printContainer, { scale: 2 });
      const imgData = canvas.toDataURL('image/png');
      
      const { jsPDF } = window.jspdf;
      const pdf = new jsPDF({ orientation: 'portrait', unit: 'pt', format: 'a4' });

      // 3. Calculate dimensions for pagination.
      const imgWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      let heightLeft = imgHeight;
      let position = 0;

      // 4. Add the first page.
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;

      // 5. **THE FIX**: Loop and add new pages if content overflows.
      while (heightLeft > 0) {
        position = position - pageHeight; // Shift the image up on the next page.
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
      }
      
      pdf.save('Generated_Flashcards.pdf');

    } catch (error) {
      console.error('Failed to generate PDF:', error);
      alert('An error occurred while generating the PDF.');
    } finally {
      // 6. Clean up the temporary container and restore the button.
      document.body.removeChild(printContainer);
      exportButton.innerText = originalButtonText;
      exportButton.disabled = false;
    }
  }
</script>